#!/bin/bash

mkdir -p /var/log/kopia

function cleanup_upload {
    mountpoint=$1
    umount $mountpoint
    if [ $? -ne 0 ]; then
        echo "Failed to umount snapshot from $mountpoint"
    fi
    rmdir $mountpoint
    if [ $? -ne 0 ]; then
        echo "Failed to remove directory $mountpoint"
    fi
}

function upload_backup {
    snapshot=$1
    mountpoint="/mnt/kopia_${snapshot}"

    echo "Starting backup for $snapshot"

    timestamp=${snapshot#*@zrepl_s3_}
    source_path=${snapshot%%@zrepl_s3_*}

    backup_path=
    if [ "$(zfs get -H -o value type $source_path)" = "filesystem" ]; then
        trap 'cleanup_upload $mountpoint' RETURN
        mkdir -p $mountpoint
        mount -t zfs $snapshot $mountpoint
        if [ $? -ne 0 ]; then
            echo "Failed to mount snapshot $snapshot"
            return 1
        fi
        backup_path=/mnt/kopia_$snapshot
    else
        backup_path=/dev/zvol/$snapshot
    fi
    
    /usr/bin/kopia --config-file=/etc/kopia/repository.config snapshot create --start-time="$(date -d $timestamp "+%F %H:%M:%S %Z")" --log-dir="$LOG_DIR/kopia" --tags automatic:true --log-level=warning --override-source=/$source_path $backup_path
    if [ $? -ne 0 ]; then
        echo "Failed to create kopia snapshot for $snapshot"
        return 1
    fi
    echo "Backup completed successfully for $snapshot"

    zfs release kopia $snapshot
    if [ $? -ne 0 ]; then
        echo "Failed to release snapshot $snapshot"
        return 1
    fi

    return 0
}

for mountpoint in $(mount | grep "/mnt/kopia" | awk '{print $3}'); do
  echo "Unmounting failed backup from $mountpoint..."
  umount "$mountpoint"
  if [ $? -ne 0 ]; then
    echo "Failed to unmount $mountpoint"
  fi
done

echo Processing backups...

# Get all ZFS snapshots with at least one user hold
zfs list -t snapshot -o name,userrefs | tail -n +2 | awk '$2 != 0 {print $1}' | while read -r snapshot; do
    zfs holds -H $snapshot | grep kopia > /dev/null
    # Only process backups with hold `kopia`
    if [ $? -eq 0 ]; then
        upload_backup $snapshot
    fi
done

echo Done processing backups
